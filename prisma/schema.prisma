// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  identifier    String
  token         String      @unique
  expires       DateTime

  @@unique([identifier, token], map: "verificationTokenKey")
}

model Session {
  id                  String    @id @default(cuid())
  sessionToken        String    @unique
  userId              String // <name>@<domain> (domain excluded if local user)
  expires             DateTime?

  scopes              Int       @default(-1) // > 0 means it isn't a user session
  city                String?
  country             String?
  browser             String?
  platform            String?
  createdAt           DateTime  @default(now())

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                  @id
  type                  UserType                @default(USER)
  moderationStatus      ModerationStatus        @default(UNMODERATED)
  name                  String
  domain                String                  @default("")
  displayName           String?
  password              String                  @default("")

  bio                   String?                 @db.Text
  profilePicture        String?                 @db.Text
  profileBanner         String?                 @db.Text

  email                 String?                 @unique
  emailVerified         DateTime?

  totpSecret            String?                 @db.Text
  backupCodes           Json                    @default("[]")

  sessions              Session[]

  createdAt             DateTime                @default(now())
  firstSeen             DateTime                @default(now())
  // When this user was first seen amongst
  // a majority of the federated servers
  lastSeen              DateTime                @default(now())

  deleted               Boolean                 @default(false) // Only set to true once a week has passed since deletedAt
  deletedAt             DateTime?
  // If present, user is considered deleted and will have
  // their information automatically cleared after a week
  // has passed.

  matureProfile         Boolean                 @default(false) // Whether or not the contents of this profile is "mature"
  links                 Json                    @default("{}") // [name]: {url: URL, verified: true/false}
  // A user's links will always be verified by the local server, not the origin server of the user
  settings              Json                    @default("{}")

  authoredWorks         UserWork[]              @relation("authors")
  publishedWorks        UserWork[]              @relation("publishers")
  groups                UserGroup[]             @relation("groups")
  subscriptions         UserSubscription[]      @relation("subscriptions")
  subscribers           UserSubscription[]      @relation("subscribers")
  members               UserMembership[]        @relation("members")
  memberships           UserMembership[]        @relation("memberships")
  paidWorks             UserTransaction[]       @relation("paidWorks")
  organizations         OrganizationMember[]    @relation("userOrganizations")
  organizationMembers   OrganizationMember[]    @relation("organizationMembers")
  organizationRoles     OrganizationRole[]      @relation("organizationRoles")
  reviews               WorkReview[]
  bookmarks             UserBookmark[]

  metadata              Json                    @default("{}")

  @@unique([name, domain], map: "userKey")
}

model UserMembership {
  id                String  @id @default(cuid())
  userId            String

  membershipId      String

  transactionId     String  @db.Text

  user              User    @relation("memberships", fields: [userId], references: [id], map: "userMemberships")
  membership        User    @relation("members", fields: [membershipId], references: [id], map: "userMembers")

  @@unique([userId, membershipId], map: "membershipKey")
}

model UserTransaction {
  id                String    @id @default(cuid())
  userId            String

  workId            String
  workPart          String?   @db.Text
  // If not a transaction for the full work,
  // this will indicate what part of the work
  // it is for

  transactionId     String

  user              User      @relation("paidWorks", fields: [userId], references: [id], map: "userPaidWorks")
  work              UserWork  @relation("transactions", fields: [workId], references: [id], map: "userTransactions")
}

model UserSubscription {
  id                  Int     @id @default(autoincrement())
  userId              String
  subscriptionId      String

  user                User    @relation("subscriptions", fields: [userId], references: [id], map: "userSubscriptions")
  subscription        User    @relation("subscribers", fields: [subscriptionId], references: [id], map: "userSubscribers")
}

model UserBookmark {
  id          String            @id
  userId      String
  workId      String
  status      BookmarkStatus    @default(PLANNED)

  user        User              @relation(fields: [userId], references: [id])
  work        UserWork          @relation(fields: [workId], references: [id])
}

model UserGroup {
  id          Int       @id @default(autoincrement())
  priority    Int
  permissions Int       @default(0)
  name        String
  icon        String?
  users       User[]    @relation("groups")
}

model UserWork {
  id                  String              @id // <workId>#<domain>
  domain              String              @default("")
  workId              String

  createdAt           DateTime            @default(now())
  publishedAt         DateTime?
  lastUpdated         DateTime            @updatedAt

  type                WorkType            @default(UNKNOWN)
  status              WorkStatus          @default(UNPUBLISHED)
  moderationStatus    ModerationStatus    @default(UNMODERATED)

  mature              Boolean             @default(false) // Whether or not this work is considered "mature"
  name                String
  description         String              @db.Text
  authors             User[]              @relation("authors")
  publishers          User[]              @relation("publishers") // Not relevant for art works
  genres              Genre[]             @relation("workGenres")
  languages           Language[]          @relation("workLanguages")
  franchises          Franchise[]         @relation("workFranchises")
  reviews             WorkReview[]
  assets              WorkAsset[]
  transactions        UserTransaction[]   @relation("transactions")
  userBookmarks       UserBookmark[]

  rating              Float               @default(0)
  totalRatings        Int                 @default(0)
  views               Int                 @default(0)

  translations        Json                @default("{}") // [lang-code]: {name: "", description: ""}
  metadata            Json                @default("{}")
  officialProof       Json                @default("{}")
  // If this is an official franchise work, should be a JWT from the
  // domains of each franchise that proves it is real, and if already
  // proven real, a value indicating so

  @@unique([domain, workId], map: "userWorkKey")
}

model WorkView {
  id            String      @default(uuid())
  workDomain    String      @default("")
  workId        String
  workPart      String

  userDomain    String      @default("")
  userName      String

  firstViewed   DateTime    @default(now())
  viewedAt      DateTime    @default(now())

  @@unique([workDomain, workId, workPart, userDomain, userName], map: "workViewKey")
}

model WorkAsset {
  id            Int       @id @default(autoincrement())
  work          UserWork  @relation(fields: [workId], references: [id])
  workId        String

  name          String
  resource      String    @db.Text  // URL leading to the asset
  metadata      Json      @default("{}")

  @@unique([workId, name], map: "workAssetKey")
}

model WorkReview {
  id            Int       @id @default(autoincrement())
  work          UserWork  @relation(fields: [workId], references: [id])
  workId        String

  userId        String
  user          User      @relation(fields: [userId], references: [id])

  content       String    @db.Text
  rating        Float     @default(0)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([workId, userId], map: "workReviewKey")
}

model Genre {
  name          String          @id
  displayName   String?
  works         UserWork[]      @relation("workGenres")
  franchises    Franchise[]     @relation("franchiseGenres")
}

model Language {
  id      String        @id
  name    String
  works   UserWork[]    @relation("workLanguages")
}

model Franchise {
  id              Int           @id @default(autoincrement())
  domain          String        @default("")
  franchiseId     String        @default(cuid())

  name            String
  description     String        @db.Text

  genres          Genre[]       @relation("franchiseGenres")
  works           UserWork[]    @relation("workFranchises")
  allowFanWorks   Boolean       @default(true)

  cover           String?       @db.Text
  banner          String?       @db.Text

  translations    Json          @default("{}") // [lang-code]: {name: "", description: ""}

  @@unique([franchiseId, domain], map: "franchiseKey")
}

model AnalyticsItem {
  id      Int         @id @default(autoincrement())
  key     String      // colons indicate scopes
  date    DateTime    @default(now())
  value   Float       @default(0)

  @@unique([key, date], map: "analyticsKey")
}

model FederatedServer {
  domain          String      @id
  discoveredAt    DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  publicKey       String
  // Public key is used to verify legitimacy of requests received
  // from servers claiming to be this one, and is gotten from
  // a DNS record on the domain
}

model FFlag {
  key           String      @id
  value         String      @default("")
  type          FlagType    @default(FLAG)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrganizationRole {
  id                String                  @id
  organizationId    String
  roleId            String                  @default(cuid())

  name              String
  priority          Int                     @default(1)
  permissions       Int                     @default(0)
  memberCount       Int                     @default(0)
  members           OrganizationMember[]    @relation("organizationMemberRoles")
  organization      User                    @relation("organizationRoles", fields: [organizationId], references: [id])

  @@unique([organizationId, roleId], map: "organizationRoleKey")
}

model OrganizationMember {
  id                String              @id
  userId            String
  organizationId    String
  roleId            String
  role              OrganizationRole    @relation("organizationMemberRoles", fields: [organizationId, roleId], references: [organizationId, roleId])
  user              User                @relation("userOrganizations", fields: [userId], references: [id])
  organization      User                @relation("organizationMembers", fields: [organizationId], references: [id])

  @@unique([organizationId, roleId, id], map: "organizationMemberKey")
}

enum BookmarkStatus {
  VIEWING
  ON_HOLD
  PLANNED
  COMPLETED
  DROPPED
}

enum FlagType {
  FLAG
  INT
  STRING
  LIST
}

enum AssetType {
  ART
  COVER
  BANNER
  NOVEL_CHAPTER
  COMIC_CHAPTER
}

enum UserType {
  USER
  ORGANIZATION
  BOT
  SYSTEM
}

enum WorkType {
  UNKNOWN
  ART
  NOVEL
  COMIC
  VIDEO
  AUDIO
}

enum WorkStatus {
  UNPUBLISHED
  RELEASING
  HIATUS
  DISCONTINUED
  COMPLETED
}

enum WorkClassification {
  UNKNOWN

  // Art
  ART
  FAN_ART

  // Comics
  COMIC
  MANGA
  MANHWA
  MANHUA

  // Novels
  NOVEL
  INTERACTIVE_NOVEL
  VISUAL_NOVEL

  // Comics & Novels
  SIDE_STORY

  // Video
  VIDEO
  MOVIE
  TV
  OVA
  ONA
  SPECIAL

  // Audio & Video
  MUSIC

  // Audio
  AUDIO
}

enum ModerationStatus {
  UNMODERATED
  SUSPENDED
  TERMINATED
  UNDER_INVESTIGATION
}